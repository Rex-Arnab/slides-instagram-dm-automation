generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId   String  @unique
  email     String  @unique
  firstname String? @unique
  lastname  String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Subscription Subscription?
  Automation   Automation[]
  Integration  Integration[]
}

model Subscription {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan SUBSCRIPTION_PLAN @default(FREE)
}

model Integration {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      INTEGRATIONS @default(INSTAGRAM)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid

  token       String    @unique
  expiresAt   DateTime?
  instagramId String?   @unique
}

model Automation {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name      String   @default("Untitled")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(false)

  User     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String?    @db.Uuid
  Dms      Dms[]
  Post     Post[]
  Listener Listener[]
  Trigger  Trigger[]
  Keyword  Keyword[]
}

model Dms {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId String?
  reciever String?
  message  String?
}

model Post {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid    String
  caption   String?
  model     String
  mediaType MEDIATYPE @default(IMAGE)

  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Listener {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  listener     LISTENERS @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int       @default(0)
  commentCount Int       @default(0)
}

model Trigger {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type String

  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Keyword {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word String

  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word])
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}
